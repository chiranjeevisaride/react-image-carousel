{"version":3,"sources":["serviceWorker.js","components/SliderContent.js","components/Slide.js","components/Arrow.js","components/Dots.js","components/Title.js","components/Slider.js","index.js","data/images.js","img/left-arrow.svg","img/right-arrow.svg"],"names":["Boolean","window","location","hostname","match","SliderContent","props","css","translate","transition","width","children","Slide","content","Arrow","direction","handleClick","onClick","src","rightArrow","leftArrow","Dot","active","Dots","slides","activeSlide","map","slide","i","key","Title","titleText","getWidth","innerWidth","SliderCSS","Slider","titles","firstSlide","secondSlide","lastSlide","length","useState","_slides","state","setState","transitionRef","useRef","resizeRef","useEffect","current","smoothTransition","handleResize","transitionEnd","addEventListener","e","target","className","includes","onResize","removeEventListener","slice","_slide","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6PCdN,IAceC,EAdO,SAAAC,GAAK,OACzB,mBACEC,IAAKA,YAAF,IACwBD,EAAME,UACEF,EAAMG,WAE9BH,EAAMI,QAIhBJ,EAAMK,W,kQCVX,IAaeC,EAbD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASH,EAAZ,EAAYA,MAAZ,OACZ,mBACEH,IAAKA,YAAF,IAEQG,EACgBG,M,kkBCH/B,IA+BeC,EA/BD,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,YAAd,OACZ,mBACEC,QAASD,EACTT,IAAKA,YAAF,IAIe,UAAdQ,EAAA,2BAasC,SAAdA,EAAuB,KAAO,MAO3C,UAAdA,EAAwB,mBAAKG,IAAKC,MAAiB,mBAAKD,IAAKE,Q,uaC7BlE,IAAMC,EAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACV,oBACEf,IAAKA,YAAF,IAKae,EAAS,UAAY,YAsB1BC,EAjBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAX,OACX,mBACElB,IAAKA,YAAF,MASFiB,EAAOE,KAAI,SAACC,EAAOC,GAAR,OACV,YAAC,EAAD,CAAKC,IAAKF,EAAOL,OAAQG,IAAgBG,S,sUCtB/C,IAmBeE,EAnBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAF,OACZ,mBACExB,IAAKA,YAAF,MAaFwB,I,gMCZL,IAAMC,EAAW,kBAAM/B,OAAOgC,YAkHxBC,EAAY3B,YAAH,KASA4B,EAtHA,SAAA7B,GAAU,IACfkB,EAAmBlB,EAAnBkB,OAAQY,EAAW9B,EAAX8B,OAEVC,EAAab,EAAO,GACpBc,EAAcd,EAAO,GACrBe,EAAYf,EAAOA,EAAOgB,OAAS,GALnB,EAOIC,mBAAS,CACjChB,YAAa,EACbjB,UAAWwB,IACXvB,WAAY,IACZiC,QAAS,CAACH,EAAWF,EAAYC,KAXb,mBAOfK,EAPe,KAORC,EAPQ,KAcdnB,EAAgDkB,EAAhDlB,YAAajB,EAAmCmC,EAAnCnC,UAAWkC,EAAwBC,EAAxBD,QAASjC,EAAekC,EAAflC,WAEnCoC,EAAgBC,mBAChBC,EAAYD,mBAElBE,qBAAU,WACRH,EAAcI,QAAUC,EACxBH,EAAUE,QAAUE,KAGtBH,qBAAU,WAER,IAUMI,EAAgBnD,OAAOoD,iBAAiB,iBAV/B,SAAAC,GACTA,EAAEC,OAAOC,UAAUC,SAAS,kBAC9BZ,EAAcI,aASZS,EAAWzD,OAAOoD,iBAAiB,UAL1B,WACbN,EAAUE,aAOZ,OAAO,WACLhD,OAAO0D,oBAAoB,gBAAiBP,GAC5CnD,OAAO0D,oBAAoB,SAAUD,MAEtC,IAEHV,qBAAU,WACW,IAAfvC,GAAkBmC,EAAS,2BAAKD,GAAN,IAAalC,WAAY,SACtD,CAACA,IAEJ,IAAM0C,EAAe,WACnBP,EAAS,2BAAKD,GAAN,IAAanC,UAAWwB,IAAYvB,WAAY,MAGpDyC,EAAmB,WACvB,IAAIR,EAAU,GAGZA,EADEjB,IAAgBD,EAAOgB,OAAS,EACxB,CAAChB,EAAOA,EAAOgB,OAAS,GAAID,EAAWF,GAC1B,IAAhBZ,EAA6B,CAACc,EAAWF,EAAYC,GAC/Cd,EAAOoC,MAAMnC,EAAc,EAAGA,EAAc,GAE3DmB,EAAS,2BACJD,GADG,IAEND,UACAjC,WAAY,EACZD,UAAWwB,QAkBf,OACI,uBACE,mBAAKzB,IAAK2B,GACV,YAAC,EAAD,CACE1B,UAAWA,EACXC,WAAYA,EACZC,MAAOsB,IAAaU,EAAQF,QAE3BE,EAAQhB,KAAI,SAACmC,EAAQjC,GAAT,OACX,YAAC,EAAD,CAAOlB,MAAOsB,IAAYH,IAAKgC,EAASjC,EAAGf,QAASgD,QAIxD,YAAC,EAAD,CAAO9C,UAAU,OAAOC,YApBZ,kBAChB4B,EAAS,2BACJD,GADG,IAENnC,UAAW,EACXiB,YAA6B,IAAhBA,EAAoBD,EAAOgB,OAAS,EAAIf,EAAc,QAiBjE,YAAC,EAAD,CAAOV,UAAU,QAAQC,YA5Bb,kBAChB4B,EAAS,2BACJD,GADG,IAENnC,UAAWA,EAAYwB,IACvBP,YAAaA,IAAgBD,EAAOgB,OAAS,EAAI,EAAIf,EAAc,QA0BjE,YAAC,EAAD,CAAMD,OAAQA,EAAQC,YAAaA,KAErC,uBACM,YAAC,EAAD,CAAOM,UAAWK,EAAOX,QC9GrCqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAQxC,OCTU,CAClB,6GACA,oFACA,oFACA,qFDKwBY,OCDD,CACvB,8CACA,2CACA,2CACA,gDDDF6B,SAASC,cAAc,UPwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBSzI5BC,EAAOC,QAAU,IAA0B,wC,kBCA3CD,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.29a9662f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** @jsx jsx */\nimport React from 'react'\nimport { css, jsx } from '@emotion/core'\n\nconst SliderContent = props => (\n  <div\n    css={css`\n      transform: translateX(-${props.translate}px);\n      transition: transform ease-out ${props.transition}s;\n      height: 100%;\n      width: ${props.width}px;\n      display: flex;\n    `}\n  >\n    {props.children}\n  </div>\n)\n\nexport default SliderContent","/** @jsx jsx */\nimport React from 'react'\nimport { css, jsx } from '@emotion/core'\n\nconst Slide = ({ content, width }) => (\n  <div\n    css={css`\n      height: 100%;\n      width: ${width}px;\n      background-image: url('${content}');\n      background-size: cover;\n      background-repeat: no-repeat;\n      background-position: center;\n    `}\n  />\n)\n\nexport default Slide","/** @jsx jsx */\nimport React from 'react'\nimport { css, jsx } from '@emotion/core'\nimport leftArrow from '../img/left-arrow.svg'\nimport rightArrow from '../img/right-arrow.svg'\n\nconst Arrow = ({ direction, handleClick }) => (\n  <div\n    onClick={handleClick}\n    css={css`\n      display: flex;\n      position: absolute;\n      top: 50%;\n      ${direction === 'right' ? `right: 25px` : `left: 25px`};\n      height: 50px;\n      width: 50px;\n      justify-content: center;\n      background: white;\n      border-radius: 50%;\n      cursor: pointer;\n      align-items: center;\n      transition: transform ease-in 0.1s;\n      &:hover {\n        transform: scale(1.1);\n      }\n      img {\n        transform: translateX(${direction === 'left' ? '-2' : '2'}px);\n        &:focus {\n          outline: 0;\n        }\n      }\n    `}\n  >\n    {direction === 'right' ? <img src={rightArrow} /> : <img src={leftArrow} />}\n  </div>\n)\n\nexport default Arrow","/** @jsx jsx */\nimport React from 'react'\nimport { css, jsx } from '@emotion/core'\n\nconst Dot = ({ active }) => (\n  <span\n    css={css`\n      padding: 10px;\n      margin-right: 5px;\n      cursor: pointer;\n      border-radius: 50%;\n      background: ${active ? '#5477BB' : 'white'};\n    `}\n  />\n)\n\nconst Dots = ({ slides, activeSlide }) => (\n  <div\n    css={css`\n      position: absolute;\n      bottom: 25px;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `}\n  >\n    {slides.map((slide, i) => (\n      <Dot key={slide} active={activeSlide === i} />\n    ))}\n  </div>\n)\n\nexport default Dots","/** @jsx jsx */\nimport React from 'react'\nimport { css, jsx } from '@emotion/core'\n\n\n\nconst Title = ({titleText}) => (\n  <div\n    css={css`\n      position: absolute;\n      bottom: 200px;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      letter-spacing:5px;\n      font-size: 30px;\n      font-weight: bold;\n      color: #191970;\n    `}\n  >\n    {titleText}\n  </div>\n)\n\nexport default Title","/** @jsx jsx */\nimport React, { useState, useEffect, useRef } from 'react'\nimport { css, jsx } from '@emotion/core'\nimport SliderContent from './SliderContent'\nimport Slide from './Slide'\nimport Arrow from './Arrow'\nimport Dots from './Dots'\nimport Title from './Title';\n\nconst getWidth = () => window.innerWidth\n\n/**\n * @function Slider\n */\nconst Slider = props => {\n  const { slides, titles } = props\n\n  const firstSlide = slides[0]\n  const secondSlide = slides[1]\n  const lastSlide = slides[slides.length - 1]\n\n  const [state, setState] = useState({\n    activeSlide: 0,\n    translate: getWidth(),\n    transition: 0.45,\n    _slides: [lastSlide, firstSlide, secondSlide]\n  })\n\n  const { activeSlide, translate, _slides, transition } = state\n\n  const transitionRef = useRef()\n  const resizeRef = useRef()\n\n  useEffect(() => {\n    transitionRef.current = smoothTransition\n    resizeRef.current = handleResize\n  })\n\n  useEffect(() => {\n   \n    const smooth = e => {\n      if (e.target.className.includes('SliderContent')) {\n        transitionRef.current()\n      }\n    }\n\n    const resize = () => {\n      resizeRef.current()\n    }\n\n    const transitionEnd = window.addEventListener('transitionend', smooth)\n    const onResize = window.addEventListener('resize', resize)\n\n\n    return () => {\n      window.removeEventListener('transitionend', transitionEnd)\n      window.removeEventListener('resize', onResize)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (transition === 0) setState({ ...state, transition: 0.45 })\n  }, [transition])\n\n  const handleResize = () => {\n    setState({ ...state, translate: getWidth(), transition: 0 })\n  }\n\n  const smoothTransition = () => {\n    let _slides = []\n\n    if (activeSlide === slides.length - 1)\n      _slides = [slides[slides.length - 2], lastSlide, firstSlide]\n    else if (activeSlide === 0) _slides = [lastSlide, firstSlide, secondSlide]\n    else _slides = slides.slice(activeSlide - 1, activeSlide + 2)\n\n    setState({\n      ...state,\n      _slides,\n      transition: 0,\n      translate: getWidth()\n    })\n  }\n\n  const nextSlide = () =>\n    setState({\n      ...state,\n      translate: translate + getWidth(),\n      activeSlide: activeSlide === slides.length - 1 ? 0 : activeSlide + 1\n    })\n\n  const prevSlide = () =>\n    setState({\n      ...state,\n      translate: 0,\n      activeSlide: activeSlide === 0 ? slides.length - 1 : activeSlide - 1\n    })\n\n  return (\n      <div>\n        <div css={SliderCSS}>\n        <SliderContent\n          translate={translate}\n          transition={transition}\n          width={getWidth() * _slides.length}\n        >\n          {_slides.map((_slide, i) => (\n            <Slide width={getWidth()} key={_slide + i} content={_slide} />\n          ))}\n        </SliderContent>\n\n        <Arrow direction=\"left\" handleClick={prevSlide} />\n        <Arrow direction=\"right\" handleClick={nextSlide} />\n\n        <Dots slides={slides} activeSlide={activeSlide} />\n      </div>\n      <div>\n            <Title titleText={titles[activeSlide]}/> \n      </div>\n      </div>\n  )\n}\n\nconst SliderCSS = css`\n  position: relative;\n  height: 70vh;\n  width: 100vw;\n  margin: 0 auto;\n  overflow: hidden;\n  white-space: nowrap;\n`\n\nexport default Slider","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Slider from './components/Slider';\nimport {images, imageTitles} from './data/images';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Slider slides={images} titles = {imageTitles} />\n  </React.StrictMode>,\n  document.querySelector('.main')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const images = [\n    'https://photos.zillowstatic.com/fp/172db863cf7bbe67be928dc5b7250e36-uncropped_scaled_within_1536_1152.webp',\n    'https://photos.zillowstatic.com/fp/b0951f097ee352f4c93fa61396d8f1d6-cc_ft_768.jpg',\n    'https://photos.zillowstatic.com/fp/cd3931f99440c846f70cbbbbc301a0a8-cc_ft_768.jpg',\n    'https://photos.zillowstatic.com/fp/291ad75d03d1dda38352c1e08337d462-cc_ft_768.jpg'\n  ];\n\n\nexport const imageTitles = [\n    '6552 Long Acres Dr, Sandy Springs, GA 30328',\n    '819 Forest Path Ln, Alpharetta, GA 30022',\n    '460 Wakefield Trce, Alpharetta, GA 30004',\n    '3760 Newport Bay Dr, Alpharetta, GA 30005',\n];","module.exports = __webpack_public_path__ + \"static/media/left-arrow.34a4f31c.svg\";","module.exports = __webpack_public_path__ + \"static/media/right-arrow.5e5b72cc.svg\";"],"sourceRoot":""}